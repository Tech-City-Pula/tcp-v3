/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as LearnRouteImport } from './routes/learn'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as BlogsRouteImport } from './routes/blogs'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EventsIndexRouteImport } from './routes/events.index'
import { Route as EventsEventIdRouteImport } from './routes/events.$eventId'
import { Route as BlogSlugRouteImport } from './routes/blog.$slug'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const LearnRoute = LearnRouteImport.update({
  id: '/learn',
  path: '/learn',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogsRoute = BlogsRouteImport.update({
  id: '/blogs',
  path: '/blogs',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsIndexRoute = EventsIndexRouteImport.update({
  id: '/events/',
  path: '/events/',
  getParentRoute: () => rootRouteImport,
} as any)
const EventsEventIdRoute = EventsEventIdRouteImport.update({
  id: '/events/$eventId',
  path: '/events/$eventId',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogSlugRoute = BlogSlugRouteImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blogs': typeof BlogsRoute
  '/contact': typeof ContactRoute
  '/learn': typeof LearnRoute
  '/test': typeof TestRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events': typeof EventsIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blogs': typeof BlogsRoute
  '/contact': typeof ContactRoute
  '/learn': typeof LearnRoute
  '/test': typeof TestRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events': typeof EventsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/blogs': typeof BlogsRoute
  '/contact': typeof ContactRoute
  '/learn': typeof LearnRoute
  '/test': typeof TestRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/events/$eventId': typeof EventsEventIdRoute
  '/events/': typeof EventsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/blogs'
    | '/contact'
    | '/learn'
    | '/test'
    | '/blog/$slug'
    | '/events/$eventId'
    | '/events'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/blogs'
    | '/contact'
    | '/learn'
    | '/test'
    | '/blog/$slug'
    | '/events/$eventId'
    | '/events'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/blogs'
    | '/contact'
    | '/learn'
    | '/test'
    | '/blog/$slug'
    | '/events/$eventId'
    | '/events/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  BlogsRoute: typeof BlogsRoute
  ContactRoute: typeof ContactRoute
  LearnRoute: typeof LearnRoute
  TestRoute: typeof TestRoute
  BlogSlugRoute: typeof BlogSlugRoute
  EventsEventIdRoute: typeof EventsEventIdRoute
  EventsIndexRoute: typeof EventsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/learn': {
      id: '/learn'
      path: '/learn'
      fullPath: '/learn'
      preLoaderRoute: typeof LearnRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blogs': {
      id: '/blogs'
      path: '/blogs'
      fullPath: '/blogs'
      preLoaderRoute: typeof BlogsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/': {
      id: '/events/'
      path: '/events'
      fullPath: '/events'
      preLoaderRoute: typeof EventsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/events/$eventId': {
      id: '/events/$eventId'
      path: '/events/$eventId'
      fullPath: '/events/$eventId'
      preLoaderRoute: typeof EventsEventIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  BlogsRoute: BlogsRoute,
  ContactRoute: ContactRoute,
  LearnRoute: LearnRoute,
  TestRoute: TestRoute,
  BlogSlugRoute: BlogSlugRoute,
  EventsEventIdRoute: EventsEventIdRoute,
  EventsIndexRoute: EventsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
